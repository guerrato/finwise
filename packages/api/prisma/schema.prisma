// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  email           String            @unique
  password        String
  verified        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  UserAccountRole UserAccountRole[]

  @@map("users")
}

model Account {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  currency        Currency
  UserAccountRole UserAccountRole[]
  Bank            Bank[]
  Outflow         Outflow[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("accounts")
}

model UserAccountRole {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  accountId String   @db.Uuid
  account   Account  @relation(fields: [accountId], references: [id])
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("userAccountRoles")
}

model Bank {
  id                    String                  @id @default(uuid()) @db.Uuid
  name                  String
  description           String
  Inflow                Inflow[]
  accountId             String                  @db.Uuid
  account               Account                 @relation(fields: [accountId], references: [id])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  Card                  Card[]
  OutflowPaymentDetails OutflowPaymentDetails[]

  @@map("banks")
}

model Inflow {
  id                String     @id @default(uuid()) @db.Uuid
  amount            Float
  datetime          DateTime
  source            String?
  type              InflowType
  accountId         String
  destinationBankId String?    @db.Uuid
  destinationBank   Bank?      @relation(fields: [destinationBankId], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("inflows")
}

model Outflow {
  id                    String                  @id @default(uuid()) @db.Uuid
  amount                Float
  datetime              DateTime                @default(now())
  description           String?
  cfe12741Tax           String?
  cfeNumber             String?
  cofinsStTotal         String?
  cofinsTotal           String?
  icmsTotal             String?
  pisStTotal            String?
  pisTotal              String?
  receiptNumber         String?
  paymentStatus         OutflowPaymentStatus    @default(PENDING)
  processStatus         OutflowProcessStatus    @default(PENDING)
  accountId             String                  @db.Uuid
  account               Account                 @relation(fields: [accountId], references: [id])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  OutflowItem           OutflowItem[]
  OutflowInstallment    OutflowInstallment[]
  OutflowSeller         OutflowSeller[]
  OutflowPaymentDetails OutflowPaymentDetails[]

  @@map("outflows")
}

model OutflowPaymentDetails {
  id            String        @id @default(uuid()) @db.Uuid
  paymentMethod PaymentMethod
  cardId        String?       @db.Uuid
  card          Card?         @relation(fields: [cardId], references: [id])
  bankId        String?       @db.Uuid
  bank          Bank?         @relation(fields: [bankId], references: [id])
  outflowId     String        @db.Uuid
  outflow       Outflow       @relation(fields: [outflowId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("outflowPaymentDetails")
}

model OutflowItem {
  id                      String   @id @default(uuid()) @db.Uuid
  addicionalInfo          String?
  calculusRule            String?
  cfop                    String?
  cofinsAliquotPercentage String?
  cofinsBasePrice         String?
  cofinsCode              String?
  cofinsIncentive         String?
  cofinsPrice             String?
  commentToRevenue        String?
  description             String?
  discountValue           String?
  grossValue              String?
  gtin                    String?
  icmsTaxCode             String?
  ncm                     String?
  netValueIcmsTax         String?
  number                  Int?
  pisAliquotPercentage    String?
  pisBasePrice            String?
  pisCode                 String?
  pisPrice                String?
  price12741              String?
  productOriginCode       String?
  quantity                String?
  sellerInternalCode      String?
  unitOfMeasurement       String?
  unitaryValue            String?
  outflowId               String   @db.Uuid
  outflow                 Outflow  @relation(fields: [outflowId], references: [id])
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("outflowItems")
}

model OutflowInstallment {
  id          String   @id @default(uuid()) @db.Uuid
  amount      Float
  datetime    DateTime
  description String?
  outflowId   String   @db.Uuid
  outflow     Outflow  @relation(fields: [outflowId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("outflowInstallments")
}

model OutflowSeller {
  id           String   @id @default(uuid()) @db.Uuid
  address      String?
  city         String?
  cnpj         String?
  companyName  String?
  fantasyName  String
  ie           String?
  im           String?
  neighborhood String?
  stateCode    String?
  zipCode      String?
  outflowId    String   @db.Uuid
  outflow      Outflow  @relation(fields: [outflowId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("outflowSellers")
}

model Card {
  id                    String                  @id @default(uuid()) @db.Uuid
  name                  String
  type                  CardType
  description           String?
  network               CardNetwork
  issuerBankId          String                  @db.Uuid
  issuerBank            Bank                    @relation(fields: [issuerBankId], references: [id])
  dueDay                Int?                    @db.SmallInt
  closingDay            Int?                    @db.SmallInt
  limit                 Float?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  CreditCardInvoice     CreditCardInvoice[]
  OutflowPaymentDetails OutflowPaymentDetails[]

  @@map("cards")
}

model CreditCardInvoice {
  id          String   @id @default(uuid()) @db.Uuid
  amount      Float
  dueDate     DateTime
  paymentDate DateTime
  cardId      String   @db.Uuid
  card        Card     @relation(fields: [cardId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("creditCardInvoices")
}

enum UserRole {
  OWNER
  MANAGER
  VIEWER
}

enum InflowType {
  SALARY
  BONUS
  REIMBURSEMENT
  REVENUE
  OTHER
}

enum InflowStatus {
  PENDING
  RECEIVED
}

enum OutflowProcessStatus {
  PENDING
  PROCESSED
  ERROR
}

enum OutflowPaymentStatus {
  PENDING
  PAID
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  MONEY
  PIX
  TED
  DOC
  BOLETO
  TRANSFER
  DEPOSIT
}

enum CardType {
  CREDIT
  DEBIT
}

enum CardNetwork {
  VISA
  MASTERCARD
  ELO
  AMERICAN_EXPRESS
  HIPERCARD
  DINERS_CLUB
  DISCOVER
  JCB
  AURA
  SODEXO
  ALELO
  TICKET
  VR
}

enum Currency {
  AFN
  ALL
  DZD
  USD
  EUR
  AOA
  XCD
  ARS
  AMD
  AWG
  AUD
  AZN
  BSD
  BHD
  BDT
  BBD
  BYN
  BZD
  XOF
  BMD
  BTN
  INR
  BOB
  BOV
  BAM
  BWP
  NOK
  BRL
  BND
  BGN
  BIF
  CVE
  KHR
  XAF
  CAD
  KYD
  CLF
  CLP
  CNY
  COP
  COU
  KMF
  CDF
  NZD
  CRC
  CUC
  CUP
  ANG
  CZK
  DKK
  DJF
  DOP
  EGP
  SVC
  ERN
  ETB
  FKP
  FJD
  XPF
  GMD
  GEL
  GHS
  GIP
  GTQ
  GBP
  GNF
  GYD
  HTG
  HNL
  HKD
  HUF
  ISK
  IDR
  XDR
  IRR
  IQD
  ILS
  JMD
  JPY
  JOD
  KZT
  KES
  KPW
  KRW
  KWD
  KGS
  LAK
  LBP
  LSL
  ZAR
  LRD
  LYD
  CHF
  MOP
  MGA
  MWK
  MYR
  MVR
  MRU
  MUR
  XUA
  MXN
  MXV
  MDL
  MNT
  MAD
  MZN
  MMK
  NAD
  NPR
  NIO
  NGN
  OMR
  PKR
  PAB
  PGK
  PYG
  PEN
  PHP
  PLN
  QAR
  MKD
  RON
  RUB
  RWF
  SHP
  WST
  STN
  SAR
  RSD
  SCR
  SLE
  SGD
  XSU
  SBD
  SOS
  SSP
  LKR
  SDG
  SRD
  SZL
  SEK
  CHE
  CHW
  SYP
  TWD
  TJS
  TZS
  THB
  TOP
  TTD
  TND
  TRY
  TMT
  UGX
  UAH
  AED
  USN
  UYI
  UYU
  UZS
  VUV
  VEF
  VED
  VND
  YER
  ZMW
  ZWL
}
